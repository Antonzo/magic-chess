@import "../variables/breakpoints";
@import "../variables/spacing";

@each $prop-key, $property in $properties {
  @each $dir-key, $direction-list in $directions {
    @each $direction in $direction-list {
      @for $spacer-step from 1 through $spacers-steps {

        // positive
        .#{$prop-key}#{$dir-key}-#{$spacer-step} {
          #{$property}-#{$direction}: $spacer-step * $spacerStepSize !important;
        }

        // positive with breakpoints
        @each $br-key, $breakpoint in $breakpoints {
          @media #{map-get($display-breakpoints, $breakpoint)} {
            .#{$prop-key}#{$dir-key}-#{$br-key}-#{$spacer-step} {
              #{$property}-#{$direction}: $spacer-step * $spacerStepSize !important;
            }
          }
        }

        // negative
        .#{$prop-key}#{$dir-key}-n#{$spacer-step} {
          #{$property}-#{$direction}: -$spacer-step * $spacerStepSize !important;
        }

        // negative with breakpoints
        @each $br-key, $breakpoint in $breakpoints {
          @media #{map-get($display-breakpoints, $breakpoint)} {
            .#{$prop-key}#{$dir-key}-#{$br-key}-n#{$spacer-step} {
              #{$property}-#{$direction}: -$spacer-step * $spacerStepSize !important;
            }
          }
        }

      }

      // zero
      .#{$prop-key}#{$dir-key}-0 {
        #{$property}-#{$direction}: 0 !important;
      }

      // zero with breakpoints
      @each $br-key, $breakpoint in $breakpoints {
        @media #{map-get($display-breakpoints, $breakpoint)} {
          .#{$prop-key}#{$dir-key}-#{$br-key}-0 {
            #{$property}-#{$direction}: 0 !important;
          }
        }
      }
    }
  }
}